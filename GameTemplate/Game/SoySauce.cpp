#include "stdafx.h"
#include "SoySauce.h"
#include "Game.h"
#include "Player1.h"
#include "Player2.h"
#include "Player3.h"
#include "Player4.h"
//CollisionObjectを使用したいため、ファイルをインクルードする。
#include "CollisionObject.h"
//乱数を使えるようにする
#include <random>
//EffectEmitterを使用する時はファイルをインクルードする必要がある。
#include "graphics/effect/EffectEmitter.h"

namespace
{
	//乱数を生成
	constexpr int MIN = -600;//乱数の範囲最低値
	constexpr int MAX = 600;//乱数の範囲最大値
	constexpr int RAND_NUMS_TO_GENERATE = 1;//乱数を生成する回数
}


bool SoySauce::Start()
{
	m_position.y = 500.0f;
	//敵の乱数。
	std::random_device rd;
	std::default_random_engine eng(rd());
	std::uniform_int_distribution<int> distr(MIN, MAX);
	int soypos = 0;
	for (int n = 0; n < RAND_NUMS_TO_GENERATE; ++n) {
		m_position.x = distr(eng);
		break;
	}
	m_player1 = FindGO<Player1>("player1");
	m_player2 = FindGO<Player2>("player2");
	m_player3 = FindGO<Player3>("player3");
	m_player4 = FindGO<Player4>("player4");
	//モデルの読み込み
	m_soysauce.Init("Assets/modelData/SoySauce.tkm");
	EffectEngine::GetInstance()->ResistEffect(999, u"Assets/effect/Getsoysauce.efk");
	//m_position.x = -150.0f;
	m_rotation.AddRotationDegY(180.0f);
	m_soysauce.SetScale(1.0, 1.0, 1.0);
	m_soysauce.SetPosition(m_position);
	m_soysauce.SetRotation(m_rotation);
	m_soysauce.Update();

	//コリジョンオブジェクトを作成する。
	m_collisionObject = NewGO<CollisionObject>(0);
	Vector3 collisionPosition = m_position;
	//座標を敵の位置に設定する。
	collisionPosition = m_position;
	//球状のコリジョンを作成する。
	m_collisionObject->CreateSphere(collisionPosition,       //座標。
		Quaternion::Identity,                                   //回転。
		30.0f);                                                //球の大きさ(半径)。
		//名前を付ける。
	m_collisionObject->SetName("bullet_hit");
	//自動で削除を無効にする(DeleteGOで削除する必要がある)。
	m_collisionObject->SetIsEnableAutoDelete(false);
	return true;
}

SoySauce::~SoySauce()
{
	//コリジョンオブジェクトの削除
	DeleteGO(m_collisionObject);
}

void SoySauce::Update()
{
	Move();
	//プレイヤーが取得済みかつ再生が終わったら削除する。
	if (m_getsoyplayernumber == 1 && m_effectEmitter->IsPlay() == false ||
		m_getsoyplayernumber == 2 && m_effectEmitter->IsPlay() == false ||
		m_getsoyplayernumber == 3 && m_effectEmitter->IsPlay() == false ||
		m_getsoyplayernumber == 4 && m_effectEmitter->IsPlay() == false)
	{
		DeleteGO(this);
	}
}

void SoySauce::Move()
{
	m_position.y -= 5.0f;
	
	if (m_position.y <= 0.0f)
	{
		m_position.y = 0.0f;
	}
	//コリジョンオブジェクトとプレイヤーのキャラクターコントローラーが触れた時実行。
	if (m_collisionObject->IsHit(m_player1->GetCharacterController()) == true)
	{
		m_efpos = m_position;
		m_efpos.y = 0.0f;
		m_effectEmitter = NewGO<EffectEmitter>(0);
		m_effectEmitter->Init(999);
		m_effectEmitter->SetScale({ 50.0f,50.0f,50.0f });
		m_effectEmitter->SetPosition(m_efpos);
		m_effectEmitter->Play();
		//醤油カウントを１増やす。
		m_player1->AddSoySauceCount();
		m_getsoyplayernumber = 1;
		//コリジョンオブジェクトを削除
		DeleteGO(m_collisionObject);
	}
	//コリジョンオブジェクトとプレイヤーのキャラクターコントローラーが触れた時実行。
	if (m_collisionObject->IsHit(m_player2->GetCharacterController()) == true)
	{
		m_efpos = m_position;
		m_efpos.y = 0.0f;
		m_effectEmitter = NewGO<EffectEmitter>(0);
		m_effectEmitter->Init(999);
		m_effectEmitter->SetScale({ 50.0f,50.0f,50.0f });
		m_effectEmitter->SetPosition(m_efpos);
		m_effectEmitter->Play();
		//醤油カウントを１増やす。
		m_player2->AddSoySauceCount();
		m_getsoyplayernumber = 2;
		//コリジョンオブジェクトを削除
		DeleteGO(m_collisionObject);
	}
	//コリジョンオブジェクトとプレイヤーのキャラクターコントローラーが触れた時実行。
	if (m_collisionObject->IsHit(m_player3->GetCharacterController()) == true)
	{
		m_efpos = m_position;
		m_efpos.y = 0.0f;
		m_effectEmitter = NewGO<EffectEmitter>(0);
		m_effectEmitter->Init(999);
		m_effectEmitter->SetScale({ 50.0f,50.0f,50.0f });
		m_effectEmitter->SetPosition(m_efpos);
		m_effectEmitter->Play();
		//醤油カウントを１増やす。
		m_player3->AddSoySauceCount();
		m_getsoyplayernumber = 3;
		//コリジョンオブジェクトを削除
		DeleteGO(m_collisionObject);
	}
	//コリジョンオブジェクトとプレイヤーのキャラクターコントローラーが触れた時実行。
	if (m_collisionObject->IsHit(m_player4->GetCharacterController()) == true)
	{
		m_efpos = m_position;
		m_efpos.y = 0.0f;
		m_effectEmitter = NewGO<EffectEmitter>(0);
		m_effectEmitter->Init(999);
		m_effectEmitter->SetScale({ 50.0f,50.0f,50.0f });
		m_effectEmitter->SetPosition(m_efpos);
		m_effectEmitter->Play();
		//醤油カウントを１増やす。
		m_player4->AddSoySauceCount();
		m_getsoyplayernumber = 4;
		//コリジョンオブジェクトを削除
		DeleteGO(m_collisionObject);
	}
	//取得済みかつ再生中ならエフェクトがプレイヤーを追従する。
	if (m_getsoyplayernumber == 1&&m_effectEmitter->IsPlay() == true)
	{
		m_efpos = m_player1->GetPlayer1Position();
		m_effectEmitter->SetPosition(m_efpos);
		m_effectEmitter->Update();
	}
	//取得済みかつ再生中ならエフェクトがプレイヤーを追従する。
	if (m_getsoyplayernumber == 2 && m_effectEmitter->IsPlay() == true)
	{
		m_efpos = m_player2->GetPlayer2Position();
		m_effectEmitter->SetPosition(m_efpos);
		m_effectEmitter->Update();
	}
	//取得済みかつ再生中ならエフェクトがプレイヤーを追従する。
	if (m_getsoyplayernumber == 3 && m_effectEmitter->IsPlay() == true)
	{
		m_efpos = m_player3->GetPlayer3Position();
		m_effectEmitter->SetPosition(m_efpos);
		m_effectEmitter->Update();
	}
	//取得済みかつ再生中ならエフェクトがプレイヤーを追従する。
	if (m_getsoyplayernumber == 4 && m_effectEmitter->IsPlay() == true)
	{
		m_efpos = m_player4->GetPlayer4Position();
		m_effectEmitter->SetPosition(m_efpos);
		m_effectEmitter->Update();
	}
	m_soysauce.SetPosition(m_position);
	m_collisionObject->SetPosition(m_position);
	m_soysauce.Update();
}
void SoySauce::Render(RenderContext& rc)
{
	//取得していない時のみ醤油オブジェクトを描画する。
	if (m_getsoyplayernumber == 0)
	{
		m_soysauce.Draw(rc);
	}
}
